{"version":3,"sources":["src/helpers.js"],"names":["React","toH","h","GatsbyImage","MarkdownInjectGatsbyImage","htmlAst","imageData","html","children","filter","child","type","map","i","tag","Object","entries","tagName","gatsbyImageData","image","thisImageData","matchImage","properties","src","alt","outerHTML"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,QAAoB,qBAApB;AACA,OAAOC,CAAP,MAAc,aAAd;AACA,SAASC,WAAT,QAA4B,qBAA5B;;AAEA,MAAMC,yBAAyB,GAAG,CAACC,OAAD,EAAUC,SAAS,GAAG,EAAtB,KAA6B;AAC7D,QAAMC,IAAI,GAAGF,OAAO,CAACG,QAAR,CACVC,MADU,CACFC,KAAD,IAAWA,KAAK,EAAEC,IAAP,IAAeD,KAAK,CAACC,IAAN,KAAe,SADtC,EAEVC,GAFU,CAELF,KAAD,IAAW;AACd,SAAK,MAAM,CAACG,CAAD,EAAIC,GAAJ,CAAX,IAAuBC,MAAM,CAACC,OAAP,CAAeN,KAAK,CAACF,QAArB,CAAvB,EAAuD;AACrD,UAAIM,GAAG,EAAEG,OAAL,IAAgBH,GAAG,CAACG,OAAJ,KAAgB,KAApC,EAA2C;AACzC,cAAMC,eAAe,GAAGR,KAAK,CAACF,QAAN,CAAeI,GAAf,CAAoBO,KAAD,IAAW;AACpD,cAAIC,aAAa,GAAGd,SAAS,CAACG,MAAV,CACjBY,UAAD,IAAgBA,UAAU,CAAC,CAAD,CAAV,KAAkBF,KAAK,EAAEG,UAAP,EAAmBC,GADnC,CAApB;;AAGA,cAAIH,aAAa,IAAIA,aAAa,CAAC,CAAD,CAA9B,IAAqCA,aAAa,CAAC,CAAD,CAAb,CAAiB,CAAjB,CAAzC,EAA8D;AAC5D,gCACE,oBAAC,WAAD;AACE,cAAA,GAAG,EAAEA,aAAa,CAAC,CAAD,CAAb,CAAiB,CAAjB,CADP;AAEE,cAAA,GAAG,EAAED,KAAK,CAACG,UAAN,CAAiBE,GAFxB;AAGE,cAAA,KAAK,EAAEJ,aAAa,CAAC,CAAD,CAAb,CAAiB,CAAjB;AAHT,cADF;AAOD;AACF,SAbuB,CAAxB,CADyC,CAezC;;AACA,eAAOF,eAAe,CAAC,CAAD,CAAtB;AACD;AACF,KApBa,CAqBd;;;AACA,WAAOjB,GAAG,CAACC,CAAD,EAAIQ,KAAJ,CAAH,CAAce,SAArB;AACD,GAzBU,CAAb;AA0BA,SAAOlB,IAAP;AACD,CA5BD;;AA8BA,SAASH,yBAAT","sourcesContent":["import React from \"react\";\nimport { toH } from \"hast-to-hyperscript\";\nimport h from \"hyperscript\";\nimport { GatsbyImage } from \"gatsby-plugin-image\";\n\nconst MarkdownInjectGatsbyImage = (htmlAst, imageData = []) => {\n  const html = htmlAst.children\n    .filter((child) => child?.type && child.type === \"element\")\n    .map((child) => {\n      for (const [i, tag] of Object.entries(child.children)) {\n        if (tag?.tagName && tag.tagName === \"img\") {\n          const gatsbyImageData = child.children.map((image) => {\n            let thisImageData = imageData.filter(\n              (matchImage) => matchImage[1] === image?.properties?.src\n            );\n            if (thisImageData && thisImageData[0] && thisImageData[0][2]) {\n              return (\n                <GatsbyImage\n                  key={thisImageData[0][0]}\n                  alt={image.properties.alt}\n                  image={thisImageData[0][2]}\n                />\n              );\n            }\n          });\n          // only supports one image with own dedicated paragraph\n          return gatsbyImageData[0];\n        }\n      }\n      // otherwise\n      return toH(h, child).outerHTML;\n    });\n  return html;\n};\n\nexport { MarkdownInjectGatsbyImage };\n"],"file":"helpers.js"}
{"version":3,"sources":["src/helpers.js"],"names":["React","toH","h","graphql","useStaticQuery","getImage","GatsbyImage","convertToBgImage","BackgroundImage","InjectGatsbyBackgroundImage","imageData","alt_text","image","bgImage","InjectGatsbyBackgroundVideo","id","url","InjectSvg","publicURL","MarkdownInjectGatsbyImage","htmlAst","html","children","filter","child","type","map","i","tag","Object","entries","tagName","gatsbyImageData","thisImageData","matchImage","properties","src","alt","outerHTML","index","__html","getStoryStepRecall","storyFragment","storySteps","step","storyFragments","parseInt","getStorySteps","data","relationships","field_story_fragments","storyfragment","panes","field_panes","pane","recall","field_recall","paneFragments","tractStact"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { toH } from \"hast-to-hyperscript\";\nimport h from \"hyperscript\";\nimport { graphql, useStaticQuery } from \"gatsby\";\nimport { getImage, GatsbyImage } from \"gatsby-plugin-image\";\nimport { convertToBgImage } from \"gbimage-bridge\";\nimport BackgroundImage from \"gatsby-background-image\";\n\nconst InjectGatsbyBackgroundImage = (imageData, alt_text) => {\n  const image = getImage(imageData);\n  const bgImage = convertToBgImage(image);\n  return (\n    <BackgroundImage\n      className=\"paneFragmentImage\"\n      Tag=\"section\"\n      {...bgImage}\n      preserveStackingContext\n    >\n      <div>\n        <GatsbyImage image={image} alt={alt_text} />\n      </div>\n    </BackgroundImage>\n  );\n};\n\nconst InjectGatsbyBackgroundVideo = (id, url, alt_text) => {\n  return (\n    <div className=\"paneFragmentVideo\">\n      <video autoPlay={true} muted loop id={id} title={alt_text}>\n        <source src={url} type=\"video/mp4\" />\n      </video>\n    </div>\n  );\n};\n\nconst InjectSvg = (publicURL, alt_text) => {\n  return (\n    <>\n      <img src={publicURL} alt={alt_text} className=\"paneFragmentCSS\" />\n    </>\n  );\n};\n\nconst MarkdownInjectGatsbyImage = (htmlAst, imageData = []) => {\n  const html = htmlAst.children\n    .filter((child) => child?.type && child.type === \"element\")\n    .map((child) => {\n      for (const [i, tag] of Object.entries(child.children)) {\n        if (tag?.tagName && tag.tagName === \"img\") {\n          const gatsbyImageData = child.children.map((image) => {\n            let thisImageData = imageData.filter(\n              (matchImage) => matchImage[1] === image?.properties?.src\n            );\n            if (thisImageData && thisImageData[0] && thisImageData[0][2]) {\n              return (\n                <GatsbyImage\n                  key={thisImageData[0][0]}\n                  alt={image.properties.alt}\n                  image={thisImageData[0][2]}\n                />\n              );\n            }\n          });\n          // only supports one image each with its own dedicated paragraph\n          return gatsbyImageData[0];\n        }\n      }\n      // otherwise\n      return toH(h, child).outerHTML;\n    });\n\n  // render with styled-components and css\n  return html.map((tag, index) => {\n    // is either html as string OR is already a react element\n    if (typeof tag === \"object\") {\n      return tag;\n    } else if (typeof tag === \"string\") {\n      return <div key={index} dangerouslySetInnerHTML={{ __html: tag }} />;\n    }\n  });\n};\n\nconst getStoryStepRecall = (storyFragment, storySteps) => {\n  for (const [i, step] of Object.entries(storySteps?.storyFragments)) {\n    if (step.storyFragment === storyFragment) {\n      return [parseInt(i), 0];\n    }\n  }\n  return [0, 0];\n};\n\nconst getStorySteps = (data) => {\n  let storyFragments = data?.relationships?.field_story_fragments.map(\n    (storyfragment) => {\n      let panes = storyfragment.relationships.field_panes.map((pane) => {\n        return {\n          pane: pane.id,\n          recall: pane.field_recall,\n        };\n      });\n      return {\n        storyFragment: storyfragment.id,\n        recall: storyfragment.field_recall,\n        paneFragments: panes,\n      };\n    }\n  );\n  return {\n    tractStact: data.id,\n    storyFragments: storyFragments,\n  };\n};\n\nexport {\n  MarkdownInjectGatsbyImage,\n  InjectGatsbyBackgroundImage,\n  InjectGatsbyBackgroundVideo,\n  InjectSvg,\n  getStorySteps,\n  getStoryStepRecall,\n};\n"],"file":"helpers.js"}
{"version":3,"sources":["src/compose-panes.js"],"names":["React","MarkdownInjectGatsbyImage","toH","h","ComposePanes","data","relationships","field_panes","map","pane","field_pane_fragments","pane_fragment","imageData","field_image","image","id","filename","localFile","childImageSharp","gatsbyImageData","htmlAst","childPaneFragment","childMarkdownRemark","html","paneFragment","tag","index","__html"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,yBAAT,QAA0C,WAA1C;AACA,SAASC,GAAT,QAAoB,qBAApB;AACA,OAAOC,CAAP,MAAc,aAAd;;AAEA,MAAMC,YAAY,GAAIC,IAAD,IAAU;AAC7B;AACA,SAAOA,IAAI,CAACA,IAAL,CAAUC,aAAV,CAAwBC,WAAxB,CAAoCC,GAApC,CAAyCC,IAAD,IAAU;AACvD,WAAOA,IAAI,CAACH,aAAL,CAAmBI,oBAAnB,CAAwCF,GAAxC,CAA6CG,aAAD,IAAmB;AACpE,UAAIC,SAAS,GAAGD,aAAa,CAACL,aAAd,CAA4BO,WAA5B,CAAwCL,GAAxC,CAA6CM,KAAD,IAAW;AACrE,eAAO,CACLA,KAAK,CAACC,EADD,EAELD,KAAK,CAACE,QAFD,EAGLF,KAAK,CAACG,SAAN,CAAgBC,eAAhB,CAAgCC,eAH3B,CAAP;AAKD,OANe,CAAhB;AAOA,UAAIC,OAAO,GAAGT,aAAa,CAACU,iBAAd,CAAgCC,mBAAhC,CAAoDF,OAAlE;AACA,UAAIG,IAAI,GAAGtB,yBAAyB,CAACmB,OAAD,EAAUR,SAAV,CAApC;AACA,YAAMY,YAAY,GAAGD,IAAI,CAACf,GAAL,CAAS,CAACiB,GAAD,EAAMC,KAAN,KAAgB;AAC5C,YAAI,OAAOD,GAAP,KAAe,QAAnB,EAA6B;AAC3B,8BAAO;AAAK,YAAA,GAAG,EAAEC,KAAV;AAAiB,YAAA,uBAAuB,EAAE;AAAEC,cAAAA,MAAM,EAAEF;AAAV;AAA1C,YAAP;AACD,SAFD,MAEO;AACL,iBAAOA,GAAP;AACD;AACF,OANoB,CAArB;AAOA,aAAOD,YAAP;AACD,KAlBM,CAAP;AAmBD,GApBM,CAAP;AAqBD,CAvBD;;AAyBA,SAASpB,YAAT","sourcesContent":["import React from \"react\";\nimport { MarkdownInjectGatsbyImage } from \"./helpers\";\nimport { toH } from \"hast-to-hyperscript\";\nimport h from \"hyperscript\";\n\nconst ComposePanes = (data) => {\n  // loop through the panes\n  return data.data.relationships.field_panes.map((pane) => {\n    return pane.relationships.field_pane_fragments.map((pane_fragment) => {\n      let imageData = pane_fragment.relationships.field_image.map((image) => {\n        return [\n          image.id,\n          image.filename,\n          image.localFile.childImageSharp.gatsbyImageData,\n        ];\n      });\n      let htmlAst = pane_fragment.childPaneFragment.childMarkdownRemark.htmlAst;\n      let html = MarkdownInjectGatsbyImage(htmlAst, imageData);\n      const paneFragment = html.map((tag, index) => {\n        if (typeof tag === \"string\") {\n          return <div key={index} dangerouslySetInnerHTML={{ __html: tag }} />;\n        } else {\n          return tag;\n        }\n      });\n      return paneFragment;\n    });\n  });\n};\n\nexport { ComposePanes };\n"],"file":"compose-panes.js"}
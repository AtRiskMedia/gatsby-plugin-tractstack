{"version":3,"sources":["src/compose-panes.js"],"names":["React","useEffect","useRef","sanitize","MarkdownParagraph","InjectGatsbyBackgroundImage","InjectGatsbyBackgroundVideo","InjectSvg","ComposePanes","data","viewport","key","composedPanes","relationships","field_panes","map","pane","composedPane","field_pane_fragments","pane_fragment","index","react_fragment","alt_text","imageData","internal","type","field_image","image","id","filename","localFile","childImageSharp","gatsbyImageData","htmlAst","childPaneFragment","childMarkdownRemark","css_styles","css_styles_parent","field_css_styles_mobile","field_css_styles_parent_mobile","field_css_styles_tablet","field_css_styles_parent_tablet","field_css_styles_desktop","field_css_styles_parent_desktop","field_zindex","field_cdn_url","field_alt_text","this_image_data","field_svg_file","description","publicURL"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport { sanitize } from \"hast-util-sanitize\";\nimport {\n  MarkdownParagraph,\n  InjectGatsbyBackgroundImage,\n  InjectGatsbyBackgroundVideo,\n  InjectSvg,\n} from \"./helpers\";\n\nfunction ComposePanes(data) {\n  // if viewport is not yet defined, return empty fragment\n  if (typeof data?.viewport?.key === \"undefined\") return <></>;\n  // loop through the panes in view and render each pane fragment\n  const composedPanes = data?.data?.relationships?.field_panes.map((pane) => {\n    const composedPane = pane?.relationships?.field_pane_fragments.map(\n      (pane_fragment, index) => {\n        let react_fragment, alt_text, imageData;\n        switch (pane_fragment?.internal?.type) {\n          case \"paragraph__markdown\":\n            // get image data (if available)\n            imageData = pane_fragment?.relationships?.field_image?.map(\n              (image) => {\n                return [\n                  image.id,\n                  image.filename,\n                  image.localFile?.childImageSharp?.gatsbyImageData,\n                ];\n              }\n            );\n\n            // replaces images with Gatsby Images and prepares html\n            let htmlAst = sanitize(\n              pane_fragment?.childPaneFragment?.childMarkdownRemark?.htmlAst\n            );\n            let css_styles, css_styles_parent;\n            switch (data?.viewport?.key) {\n              case \"mobile\":\n                css_styles = pane_fragment?.field_css_styles_mobile;\n                css_styles_parent =\n                  pane_fragment?.field_css_styles_parent_mobile;\n                break;\n              case \"tablet\":\n                css_styles = pane_fragment?.field_css_styles_tablet;\n                css_styles_parent =\n                  pane_fragment?.field_css_styles_parent_tablet;\n                break;\n              case \"desktop\":\n                css_styles = pane_fragment?.field_css_styles_desktop;\n                css_styles_parent =\n                  pane_fragment?.field_css_styles_parent_desktop;\n                break;\n            }\n            react_fragment = MarkdownParagraph(\n              htmlAst,\n              imageData,\n              index,\n              css_styles_parent,\n              css_styles,\n              pane_fragment?.field_zindex\n            );\n            break;\n\n          case \"paragraph__background_video\":\n            react_fragment = InjectGatsbyBackgroundVideo(\n              pane_fragment?.id,\n              pane_fragment?.field_cdn_url,\n              pane_fragment?.field_alt_text,\n              index\n            );\n            break;\n\n          case \"paragraph__background_image\":\n            imageData = pane_fragment?.relationships?.field_image?.map(\n              (image) => {\n                let key = data?.viewport?.key;\n                let this_image_data = image[key];\n                if (typeof this_image_data !== \"undefined\") {\n                  return this_image_data.childImageSharp?.gatsbyImageData;\n                }\n              }\n            );\n            react_fragment = InjectGatsbyBackgroundImage(\n              imageData[0],\n              pane_fragment?.field_alt_text,\n              index\n            );\n            break;\n\n          case \"paragraph__svg\":\n            alt_text = pane_fragment?.field_svg_file?.description;\n            let publicURL =\n              pane_fragment?.relationships?.field_svg_file?.localFile\n                ?.publicURL;\n            react_fragment = InjectSvg(publicURL, alt_text, index);\n            break;\n\n          case \"paragraph__d3\":\n            //\n            break;\n\n          case \"paragraph__h5p\":\n            //\n            break;\n        }\n        return react_fragment;\n      }\n    );\n    return (\n      <div key={pane?.id} className={\"pane pane__view--\" + data?.viewport?.key}>\n        {composedPane}\n      </div>\n    );\n  });\n  return composedPanes;\n}\n\nexport { ComposePanes };\n"],"file":"compose-panes.js"}
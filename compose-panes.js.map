{"version":3,"sources":["src/compose-panes.js"],"names":["React","useRef","MarkdownParagraph","InjectGatsbyBackgroundImage","InjectGatsbyBackgroundVideo","InjectSvg","StyledWrapperSection","IsVisible","ComposePanes","data","viewport","key","composedPanes","fragments","relationships","field_panes","map","pane","i","background_colour","field_pane_fragments","filter","e","field_hidden_viewports","replace","split","indexOf","internal","type","composedPane","pane_fragment","index","react_fragment","alt_text","imageData","css_styles","css_styles_parent","field_css_styles_mobile","field_css_styles_parent_mobile","field_css_styles_tablet","field_css_styles_parent_tablet","field_css_styles_desktop","field_css_styles_parent_desktop","child","childPaneFragment","childMarkdownRemark","htmlAst","children","value","id","field_image","field_zindex","field_cdn_url","field_alt_text","field_svg_file","localFile","publicURL","description","prefersReducedMotion","options","JSON","parse","field_options","effects","payload","in","onscreen","function","speed","delay","out","offscreen","pane_height","field_height_ratio_mobile","field_height_ratio_tablet","field_height_ratio_desktop","Object","keys","length","this_css","parseInt","field_background_colour"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,MAAhB,QAA8B,OAA9B;AACA,SACEC,iBADF,EAEEC,2BAFF,EAGEC,2BAHF,EAIEC,SAJF,EAKEC,oBALF,QAMO,WANP;AAOA,SAASC,SAAT,QAA0B,iBAA1B;;AAEA,SAASC,YAAT,CAAsBC,IAAtB,EAA4B;AAC1B;AACA,MAAI,OAAOA,IAAI,EAAEC,QAAN,EAAgBC,GAAvB,KAA+B,WAAnC,EAAgD,oBAAO,yCAAP,CAFtB,CAG1B;;AACA,QAAMC,aAAa,GAAGH,IAAI,EAAEI,SAAN,EAAiBC,aAAjB,EAAgCC,WAAhC,CAA4CC,GAA5C,CACpB,CAACC,IAAD,EAAOC,CAAP,KAAa;AACX;AACA,QAAIC,iBAAiB,GAAGF,IAAI,EAAEH,aAAN,EAAqBM,oBAArB,CACtB;AADsB,KAErBC,MAFqB,CAGnBC,CAAD,IACEA,CAAC,CAACC,sBAAF,CACGC,OADH,CACW,MADX,EACmB,EADnB,EAEGC,KAFH,CAES,GAFT,EAGGC,OAHH,CAGWjB,IAAI,EAAEC,QAAN,EAAgBC,GAH3B,KAGmC,CAAC,CAPlB,EASrBU,MATqB,CASbC,CAAD,IAAOA,CAAC,EAAEK,QAAH,EAAaC,IAAb,KAAsB,8BATf,CAAxB;AAWA,QAAIC,YAAY,GAAGZ,IAAI,EAAEH,aAAN,EAAqBM,oBAArB,CACjB;AADiB,KAEhBC,MAFgB,CAGdC,CAAD,IACEA,CAAC,CAACC,sBAAF,CACGC,OADH,CACW,MADX,EACmB,EADnB,EAEGC,KAFH,CAES,GAFT,EAGGC,OAHH,CAGWjB,IAAI,EAAEC,QAAN,EAAgBC,GAH3B,KAGmC,CAAC,CAPvB,EASjB;AATiB,KAUhBU,MAVgB,CAURC,CAAD,IAAOA,CAAC,EAAEK,QAAH,EAAaC,IAAb,KAAsB,8BAVpB,EAWhBZ,GAXgB,CAWZ,CAACc,aAAD,EAAgBC,KAAhB,KAA0B;AAC7B,UAAIC,cAAJ;AAAA,UACEC,QADF;AAAA,UAEEC,SAFF;AAAA,UAGEC,UAAU,GAAG,EAHf;AAAA,UAIEC,iBAAiB,GAAG,EAJtB,CAD6B,CAO7B;;AACA,cAAQ3B,IAAI,EAAEC,QAAN,EAAgBC,GAAxB;AACE,aAAK,QAAL;AACEwB,UAAAA,UAAU,GAAGL,aAAa,EAAEO,uBAA5B;AACAD,UAAAA,iBAAiB,GAAGN,aAAa,EAAEQ,8BAAnC;AACA;;AACF,aAAK,QAAL;AACEH,UAAAA,UAAU,GAAGL,aAAa,EAAES,uBAA5B;AACAH,UAAAA,iBAAiB,GAAGN,aAAa,EAAEU,8BAAnC;AACA;;AACF,aAAK,SAAL;AACEL,UAAAA,UAAU,GAAGL,aAAa,EAAEW,wBAA5B;AACAL,UAAAA,iBAAiB,GACfN,aAAa,EAAEY,+BADjB;AAEA;AAbJ,OAR6B,CAwB7B;;;AACA,cAAQZ,aAAa,EAAEH,QAAf,EAAyBC,IAAjC;AACE,aAAK,qBAAL;AACE;AACA,cAAIe,KAAK,GACPb,aAAa,EAAEc,iBAAf,EAAkCC,mBAAlC,EAAuDC,OADzD;AAEAH,UAAAA,KAAK,CAACI,QAAN,GACEjB,aAAa,EAAEc,iBAAf,EAAkCC,mBAAlC,EAAuDC,OAAvD,EAAgEC,QAAhE,EAA0E1B,MAA1E,CACGC,CAAD,IAAO,EAAEA,CAAC,CAACM,IAAF,KAAW,MAAX,IAAqBN,CAAC,CAAC0B,KAAF,KAAY,IAAnC,CADT,CADF;AAIAhB,UAAAA,cAAc,GAAG9B,iBAAiB,CAChC4B,aAAa,EAAEmB,EADiB,EAEhCN,KAFgC,EAGhCb,aAAa,EAAEhB,aAAf,EAA8BoC,WAHE,EAIhCd,iBAJgC,EAKhCD,UALgC,EAMhCL,aAAa,EAAEqB,YANiB,CAAlC;AAQA;;AAEF,aAAK,6BAAL;AACEnB,UAAAA,cAAc,GAAG5B,2BAA2B,CAC1C0B,aAAa,EAAEmB,EAD2B,EAE1CnB,aAAa,EAAEsB,aAF2B,EAG1CtB,aAAa,EAAEuB,cAH2B,EAI1CjB,iBAJ0C,EAK1CD,UAL0C,EAM1CL,aAAa,EAAEqB,YAN2B,CAA5C;AAQA;;AAEF,aAAK,6BAAL;AACEnB,UAAAA,cAAc,GAAG7B,2BAA2B,CAC1C2B,aAAa,EAAEmB,EAD2B,EAE1CnB,aAAa,EAAEhB,aAAf,EAA8BoC,WAA9B,CAA0C,CAA1C,KACEpB,aAAa,EAAEhB,aAAf,EAA8BoC,WAA9B,CAA0C,CAA1C,EACEzC,IAAI,EAAEC,QAAN,EAAgBC,GADlB,CAHwC,EAM1CmB,aAAa,EAAEuB,cAN2B,EAO1CjB,iBAP0C,EAQ1CN,aAAa,EAAEqB,YAR2B,CAA5C;AAUA;;AAEF,aAAK,gBAAL;AACEnB,UAAAA,cAAc,GAAG3B,SAAS,CACxByB,aAAa,EAAEmB,EADS,EAExBnB,aAAa,EAAEhB,aAAf,EAA8BwC,cAA9B,EAA8CC,SAA9C,EACIC,SAHoB,EAIxB1B,aAAa,EAAEwB,cAAf,EAA+BG,WAJP,EAKxBrB,iBALwB,EAMxBN,aAAa,EAAEqB,YANS,CAA1B;AAQA;;AAEF,aAAK,eAAL;AACE;AACA;;AAEF,aAAK,gBAAL;AACE;AACA;AA5DJ;;AA8DA,UAAI1C,IAAI,EAAEiD,oBAAV,EAAgC;AAC9B,4BACE;AAAK,UAAA,SAAS,EAAC,cAAf;AAA8B,UAAA,GAAG,EAAE5B,aAAa,EAAEmB;AAAlD,WACGjB,cADH,CADF;AAKD,OA7F4B,CA8F7B;;;AACA,YAAM2B,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAW/B,aAAa,EAAEgC,aAA1B,CAAhB;AACA,UAAIC,OAAO,GAAGJ,OAAO,EAAEI,OAAvB;;AACA,UAAI,CAAC,UAAD,IAAeA,OAAf,IAA0B,CAAC,WAAD,IAAgBA,OAA9C,EAAuD;AACrD;;AACA;AAAA;AAAK,UAAA,GAAG,EAAEjC,aAAa,EAAEmB;AAAzB,WAA8BjB,cAA9B;AACD,OApG4B,CAqG7B;;;AACA,UAAIgC,OAAO,GAAG;AACZC,QAAAA,EAAE,EAAE,CACFF,OAAO,EAAEG,QAAT,EAAmBC,QADjB,EAEFJ,OAAO,EAAEG,QAAT,EAAmBE,KAFjB,EAGFL,OAAO,EAAEG,QAAT,EAAmBG,KAHjB,CADQ;AAMZC,QAAAA,GAAG,EAAE,CACHP,OAAO,EAAEQ,SAAT,EAAoBJ,QADjB,EAEHJ,OAAO,EAAEQ,SAAT,EAAoBH,KAFjB,EAGHL,OAAO,EAAEQ,SAAT,EAAoBF,KAHjB;AANO,OAAd;AAYA,0BACE;AAAK,QAAA,GAAG,EAAEvC,aAAa,EAAEmB,EAAzB;AAA6B,QAAA,SAAS,EAAC;AAAvC,sBACE,oBAAC,SAAD;AAAW,QAAA,OAAO,EAAEe;AAApB,SAA8BhC,cAA9B,CADF,CADF;AAKD,KAlIgB,CAAnB,CAbW,CAiJX;;AACA,QAAIwC,WAAJ;;AACA,YAAQ/D,IAAI,EAAEC,QAAN,EAAgBC,GAAxB;AACE,WAAK,QAAL;AACE6D,QAAAA,WAAW,GAAGvD,IAAI,EAAEwD,yBAApB;AACA;;AACF,WAAK,QAAL;AACED,QAAAA,WAAW,GAAGvD,IAAI,EAAEyD,yBAApB;AACA;;AACF,WAAK,SAAL;AACEF,QAAAA,WAAW,GAAGvD,IAAI,EAAE0D,0BAApB;AACA;AATJ,KAnJW,CA8JX;;;AACA,QAAIC,MAAM,CAACC,IAAP,CAAYhD,YAAZ,EAA0BiD,MAA1B,KAAqC,CAAzC,EAA4C;AAC5C,QAAIC,QAAQ,GAAG,YAAYC,QAAQ,CAACR,WAAD,CAApB,GAAoC,KAAnD;AACA,QAAIrD,iBAAiB,CAAC2D,MAAtB,EACEC,QAAQ,GACNA,QAAQ,GACR,oBADA,GAEA5D,iBAAiB,CAAC,CAAD,CAAjB,CAAqB8D,uBAFrB,GAGA,GAJF;AAKF,wBACE,oBAAC,oBAAD;AACE,MAAA,GAAG,EAAEhE,IAAI,EAAEgC,EADb;AAEE,MAAA,SAAS,EAAE,sBAAsBxC,IAAI,EAAEC,QAAN,EAAgBC,GAFnD;AAGE,MAAA,GAAG,EAAEoE;AAHP,OAKGlD,YALH,CADF;AASD,GAjLmB,CAAtB,CAJ0B,CAuL1B;;AACA,SAAOjB,aAAP;AACD;;AAED,SAASJ,YAAT","sourcesContent":["import React, { useRef } from \"react\";\nimport {\n  MarkdownParagraph,\n  InjectGatsbyBackgroundImage,\n  InjectGatsbyBackgroundVideo,\n  InjectSvg,\n  StyledWrapperSection,\n} from \"./helpers\";\nimport { IsVisible } from \"./is-visible.js\";\n\nfunction ComposePanes(data) {\n  // if viewport is not yet defined, return empty fragment\n  if (typeof data?.viewport?.key === \"undefined\") return <></>;\n  // loop through the panes in view and render each pane fragment\n  const composedPanes = data?.fragments?.relationships?.field_panes.map(\n    (pane, i) => {\n      // check for background colour\n      let background_colour = pane?.relationships?.field_pane_fragments\n        // skip if current viewport is listed in field_hidden_viewports\n        .filter(\n          (e) =>\n            e.field_hidden_viewports\n              .replace(/\\s+/g, \"\")\n              .split(\",\")\n              .indexOf(data?.viewport?.key) == -1\n        )\n        .filter((e) => e?.internal?.type === \"paragraph__background_colour\");\n\n      let composedPane = pane?.relationships?.field_pane_fragments\n        // skip if current viewport is listed in field_hidden_viewports\n        .filter(\n          (e) =>\n            e.field_hidden_viewports\n              .replace(/\\s+/g, \"\")\n              .split(\",\")\n              .indexOf(data?.viewport?.key) == -1\n        )\n        // already processed background_colour\n        .filter((e) => e?.internal?.type !== \"paragraph__background_colour\")\n        .map((pane_fragment, index) => {\n          let react_fragment,\n            alt_text,\n            imageData,\n            css_styles = \"\",\n            css_styles_parent = \"\";\n\n          // select css for viewport\n          switch (data?.viewport?.key) {\n            case \"mobile\":\n              css_styles = pane_fragment?.field_css_styles_mobile;\n              css_styles_parent = pane_fragment?.field_css_styles_parent_mobile;\n              break;\n            case \"tablet\":\n              css_styles = pane_fragment?.field_css_styles_tablet;\n              css_styles_parent = pane_fragment?.field_css_styles_parent_tablet;\n              break;\n            case \"desktop\":\n              css_styles = pane_fragment?.field_css_styles_desktop;\n              css_styles_parent =\n                pane_fragment?.field_css_styles_parent_desktop;\n              break;\n          }\n\n          // render this paneFragment\n          switch (pane_fragment?.internal?.type) {\n            case \"paragraph__markdown\":\n              // now pre-render MarkdownParagraph elements and inject images\n              let child =\n                pane_fragment?.childPaneFragment?.childMarkdownRemark?.htmlAst;\n              child.children =\n                pane_fragment?.childPaneFragment?.childMarkdownRemark?.htmlAst?.children?.filter(\n                  (e) => !(e.type === \"text\" && e.value === \"\\n\")\n                );\n              react_fragment = MarkdownParagraph(\n                pane_fragment?.id,\n                child,\n                pane_fragment?.relationships?.field_image,\n                css_styles_parent,\n                css_styles,\n                pane_fragment?.field_zindex\n              );\n              break;\n\n            case \"paragraph__background_video\":\n              react_fragment = InjectGatsbyBackgroundVideo(\n                pane_fragment?.id,\n                pane_fragment?.field_cdn_url,\n                pane_fragment?.field_alt_text,\n                css_styles_parent,\n                css_styles,\n                pane_fragment?.field_zindex\n              );\n              break;\n\n            case \"paragraph__background_image\":\n              react_fragment = InjectGatsbyBackgroundImage(\n                pane_fragment?.id,\n                pane_fragment?.relationships?.field_image[0] &&\n                  pane_fragment?.relationships?.field_image[0][\n                    data?.viewport?.key\n                  ],\n                pane_fragment?.field_alt_text,\n                css_styles_parent,\n                pane_fragment?.field_zindex\n              );\n              break;\n\n            case \"paragraph__svg\":\n              react_fragment = InjectSvg(\n                pane_fragment?.id,\n                pane_fragment?.relationships?.field_svg_file?.localFile\n                  ?.publicURL,\n                pane_fragment?.field_svg_file?.description,\n                css_styles_parent,\n                pane_fragment?.field_zindex\n              );\n              break;\n\n            case \"paragraph__d3\":\n              //\n              break;\n\n            case \"paragraph__h5p\":\n              //\n              break;\n          }\n          if (data?.prefersReducedMotion) {\n            return (\n              <div className=\"paneFragment\" key={pane_fragment?.id}>\n                {react_fragment}\n              </div>\n            );\n          }\n          // check for options payload\n          const options = JSON.parse(pane_fragment?.field_options);\n          let effects = options?.effects;\n          if (!\"onscreen\" in effects && !\"offscreen\" in effects) {\n            // if no options, do not animate\n            <div key={pane_fragment?.id}>{react_fragment}</div>;\n          }\n          // else animate\n          let payload = {\n            in: [\n              effects?.onscreen?.function,\n              effects?.onscreen?.speed,\n              effects?.onscreen?.delay,\n            ],\n            out: [\n              effects?.offscreen?.function,\n              effects?.offscreen?.speed,\n              effects?.offscreen?.delay,\n            ],\n          };\n          return (\n            <div key={pane_fragment?.id} className=\"paneFragment\">\n              <IsVisible payload={payload}>{react_fragment}</IsVisible>\n            </div>\n          );\n        });\n\n      // compose this pane\n      let pane_height;\n      switch (data?.viewport?.key) {\n        case \"mobile\":\n          pane_height = pane?.field_height_ratio_mobile;\n          break;\n        case \"tablet\":\n          pane_height = pane?.field_height_ratio_tablet;\n          break;\n        case \"desktop\":\n          pane_height = pane?.field_height_ratio_desktop;\n          break;\n      }\n      // skip if empty pane\n      if (Object.keys(composedPane).length === 0) return;\n      let this_css = \"height:\" + parseInt(pane_height) + \"vw;\";\n      if (background_colour.length)\n        this_css =\n          this_css +\n          \" background-color:\" +\n          background_colour[0].field_background_colour +\n          \";\";\n      return (\n        <StyledWrapperSection\n          key={pane?.id}\n          className={\"pane pane__view--\" + data?.viewport?.key}\n          css={this_css}\n        >\n          {composedPane}\n        </StyledWrapperSection>\n      );\n    }\n  );\n  // this is the storyFragment\n  return composedPanes;\n}\n\nexport { ComposePanes };\n"],"file":"compose-panes.js"}
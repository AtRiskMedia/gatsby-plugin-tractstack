{"version":3,"sources":["src/compose-panes.js"],"names":["React","useRef","MarkdownParagraph","InjectGatsbyBackgroundImage","InjectGatsbyBackgroundVideo","InjectSvg","InjectSvgShape","StyledWrapperDiv","InjectCssAnimation","IsVisible","ComposePanes","data","viewport","key","composedPanes","fragments","relationships","field_panes","map","pane","i","background_colour","field_pane_fragments","filter","e","field_hidden_viewports","replace","split","indexOf","internal","type","composedPane","sort","a","b","field_zindex","pane_fragment","index","react_fragment","alt_text","imageData","shape","css_styles","css_styles_parent","field_css_styles_mobile","field_css_styles_parent_mobile","field_shape_mobile","field_css_styles_tablet","field_css_styles_parent_tablet","field_shape_tablet","field_css_styles_desktop","field_css_styles_parent_desktop","field_shape_desktop","action","buttonData","child","childPaneFragment","childMarkdownRemark","htmlAst","children","value","JSON","parse","field_options","buttons","SyntaxError","console","log","id","field_image","field_cdn_url","field_alt_text","field_svg_file","localFile","publicURL","description","effects_payload","prefersReducedMotion","options","effects","in","onscreen","function","speed","delay","out","offscreen","css","pane_height","field_height_ratio_mobile","field_height_ratio_tablet","field_height_ratio_desktop","Object","keys","length","this_css","parseInt","field_background_colour"],"mappings":"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","sourcesContent":["import React, { useRef } from \"react\";\nimport {\n  MarkdownParagraph,\n  InjectGatsbyBackgroundImage,\n  InjectGatsbyBackgroundVideo,\n  InjectSvg,\n  InjectSvgShape,\n  StyledWrapperDiv,\n  InjectCssAnimation,\n} from \"./helpers\";\nimport { IsVisible } from \"./is-visible.js\";\n\nfunction ComposePanes(data) {\n  // if viewport is not yet defined, return empty fragment\n  if (typeof data?.viewport?.key === \"undefined\") return <></>;\n  // loop through the panes in view and render each pane fragment\n  const composedPanes = data?.fragments?.relationships?.field_panes.map(\n    (pane, i) => {\n      // check for background colour\n      let background_colour = pane?.relationships?.field_pane_fragments\n        // skip if current viewport is listed in field_hidden_viewports\n        .filter(\n          (e) =>\n            e.field_hidden_viewports\n              .replace(/\\s+/g, \"\")\n              .split(\",\")\n              .indexOf(data?.viewport?.key) == -1\n        )\n        .filter((e) => e?.internal?.type === \"paragraph__background_colour\");\n\n      let composedPane = pane?.relationships?.field_pane_fragments\n        // skip if current viewport is listed in field_hidden_viewports\n        .filter(\n          (e) =>\n            e.field_hidden_viewports\n              .replace(/\\s+/g, \"\")\n              .split(\",\")\n              .indexOf(data?.viewport?.key) == -1\n        )\n        // already processed background_colour\n        .filter((e) => e?.internal?.type !== \"paragraph__background_colour\")\n        // sort by zIndex ***important\n        .sort((a, b) => (a?.field_zindex > b?.field_zindex ? 1 : -1))\n        .map((pane_fragment, index) => {\n          let react_fragment,\n            alt_text,\n            imageData,\n            shape = \"\",\n            css_styles = \"\",\n            css_styles_parent = \"\";\n\n          // select css for viewport\n          switch (data?.viewport?.key) {\n            case \"mobile\":\n              css_styles = pane_fragment?.field_css_styles_mobile;\n              css_styles_parent = pane_fragment?.field_css_styles_parent_mobile;\n              if (\n                pane_fragment?.internal?.type === \"paragraph__background_pane\"\n              )\n                shape = pane_fragment?.field_shape_mobile;\n              break;\n            case \"tablet\":\n              css_styles = pane_fragment?.field_css_styles_tablet;\n              css_styles_parent = pane_fragment?.field_css_styles_parent_tablet;\n              if (\n                pane_fragment?.internal?.type === \"paragraph__background_pane\"\n              )\n                shape = pane_fragment?.field_shape_tablet;\n              break;\n            case \"desktop\":\n              css_styles = pane_fragment?.field_css_styles_desktop;\n              css_styles_parent =\n                pane_fragment?.field_css_styles_parent_desktop;\n              if (\n                pane_fragment?.internal?.type === \"paragraph__background_pane\"\n              )\n                shape = pane_fragment?.field_shape_desktop;\n              break;\n          }\n\n          // render this paneFragment\n          switch (pane_fragment?.internal?.type) {\n            case \"paragraph__markdown\":\n              // now pre-render MarkdownParagraph elements and inject images\n              let action,\n                buttonData = {};\n              let child =\n                pane_fragment?.childPaneFragment?.childMarkdownRemark?.htmlAst;\n              child.children =\n                pane_fragment?.childPaneFragment?.childMarkdownRemark?.htmlAst?.children?.filter(\n                  (e) => !(e.type === \"text\" && e.value === \"\\n\")\n                );\n              try {\n                action = JSON.parse(pane_fragment?.field_options);\n                if (typeof action?.buttons === \"object\")\n                  buttonData = action?.buttons;\n              } catch (e) {\n                if (e instanceof SyntaxError) {\n                  console.log(\"ERROR parsing json in {}: \", e);\n                }\n              }\n              react_fragment = MarkdownParagraph(\n                pane_fragment?.id,\n                child,\n                pane_fragment?.relationships?.field_image,\n                buttonData,\n                css_styles_parent,\n                css_styles,\n                pane_fragment?.field_zindex\n              );\n              break;\n\n            case \"paragraph__background_pane\":\n              react_fragment = InjectSvgShape(\n                pane_fragment?.id,\n                shape,\n                data?.viewport?.key,\n                css_styles_parent,\n                pane_fragment?.field_zindex\n              );\n              break;\n\n            case \"paragraph__background_video\":\n              react_fragment = InjectGatsbyBackgroundVideo(\n                pane_fragment?.id,\n                pane_fragment?.field_cdn_url,\n                pane_fragment?.field_alt_text,\n                css_styles_parent,\n                css_styles,\n                pane_fragment?.field_zindex\n              );\n              break;\n\n            case \"paragraph__background_image\":\n              react_fragment = InjectGatsbyBackgroundImage(\n                pane_fragment?.id,\n                pane_fragment?.relationships?.field_image[0] &&\n                  pane_fragment?.relationships?.field_image[0][\n                    data?.viewport?.key\n                  ],\n                pane_fragment?.field_alt_text,\n                css_styles_parent,\n                pane_fragment?.field_zindex\n              );\n              break;\n\n            case \"paragraph__svg\":\n              react_fragment = InjectSvg(\n                pane_fragment?.id,\n                pane_fragment?.relationships?.field_svg_file?.localFile\n                  ?.publicURL,\n                pane_fragment?.field_svg_file?.description,\n                css_styles_parent,\n                pane_fragment?.field_zindex\n              );\n              break;\n\n            case \"paragraph__d3\":\n              //\n              break;\n\n            case \"paragraph__h5p\":\n              //\n              break;\n          }\n\n          // can we wrap this in animation?\n          let effects_payload = {};\n          if (data?.prefersReducedMotion === false) {\n            // check for options payload\n            let options;\n            try {\n              options = JSON.parse(pane_fragment?.field_options);\n            } catch (e) {\n              if (e instanceof SyntaxError) {\n                console.log(\"ERROR parsing json in {}: \", e, pane_fragment);\n              }\n            }\n            let effects = options?.effects;\n            if (effects && !\"onscreen\" in effects && !\"offscreen\" in effects) {\n              // if no options, do not animate\n              <div key={pane_fragment?.id}>{react_fragment}</div>;\n            }\n            // else animate\n            effects_payload = {\n              in: [\n                effects?.onscreen?.function,\n                effects?.onscreen?.speed,\n                effects?.onscreen?.delay,\n              ],\n              out: [\n                effects?.offscreen?.function,\n                effects?.offscreen?.speed,\n                effects?.offscreen?.delay,\n              ],\n            };\n          }\n          let css = InjectCssAnimation(effects_payload, pane_fragment?.id);\n          return (\n            <div className=\"paneFragment\" key={pane_fragment?.id}>\n              <StyledWrapperDiv css={css}>\n                <IsVisible id={pane_fragment?.id}>{react_fragment}</IsVisible>\n              </StyledWrapperDiv>\n            </div>\n          );\n        });\n\n      // compose this pane\n      let pane_height;\n      switch (data?.viewport?.key) {\n        case \"mobile\":\n          pane_height = pane?.field_height_ratio_mobile;\n          break;\n        case \"tablet\":\n          pane_height = pane?.field_height_ratio_tablet;\n          break;\n        case \"desktop\":\n          pane_height = pane?.field_height_ratio_desktop;\n          break;\n      }\n      // skip if empty pane\n      if (Object.keys(composedPane).length === 0) return;\n      let this_css = \"height:\" + parseInt(pane_height) + \"vw;\";\n      if (background_colour.length)\n        this_css =\n          this_css +\n          \" background-color:\" +\n          background_colour[0].field_background_colour +\n          \";\";\n      return (\n        <section key={pane?.id}>\n          <IsVisible id={pane?.id}>\n            <StyledWrapperDiv\n              className={\"pane pane__view--\" + data?.viewport?.key}\n              css={this_css}\n            >\n              {composedPane}\n            </StyledWrapperDiv>\n          </IsVisible>\n        </section>\n      );\n    }\n  );\n  // this is the storyFragment\n  return composedPanes;\n}\n\nexport { ComposePanes };\n"],"file":"compose-panes.js"}
{"version":3,"sources":["src/compose-panes.js"],"names":["React","styled","sanitize","MarkdownInjectGatsbyImage","InjectGatsbyBackgroundImage","InjectSvg","StyledWrapper","div","props","css","StyleWrapper","children","parent_css","ComposePanes","data","relationships","field_panes","map","pane","index","field_pane_fragments","pane_fragment","react_fragment","alt_text","imageData","field_image","image","id","filename","localFile","childImageSharp","gatsbyImageData","internal","type","htmlAst","childPaneFragment","childMarkdownRemark","field_alt_text","field_svg_file","description","publicURL","field_css_styles","field_css_styles_parent"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,QAAT,QAAyB,oBAAzB;AACA,SACEC,yBADF,EAEEC,2BAFF,EAGEC,SAHF,QAIO,WAJP;AAMA,MAAMC,aAAa,GAAGL,MAAM,CAACM,GAAI;AACjC,IAAKC,KAAD,IAAWA,KAAK,CAACC,GAAI;AACzB,CAFA;;AAGA,MAAMC,YAAY,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYF,EAAAA,GAAZ;AAAiBG,EAAAA;AAAjB,CAAD,KAAmC;AACtD,sBACE,oBAAC,aAAD;AAAe,IAAA,GAAG,EAAEA;AAApB,kBACE;AAAK,IAAA,SAAS,EAAC;AAAf,kBACE,oBAAC,aAAD;AAAe,IAAA,GAAG,EAAEH;AAApB,KAA0BE,QAA1B,CADF,CADF,CADF;AAOD,CARD;;AAUA,MAAME,YAAY,GAAIC,IAAD,IAAU;AAC7B;AACA,SAAOA,IAAI,EAAEA,IAAN,EAAYC,aAAZ,EAA2BC,WAA3B,CAAuCC,GAAvC,CAA2C,CAACC,IAAD,EAAOC,KAAP,KAAiB;AACjE;AACA,WAAOD,IAAI,EAAEH,aAAN,EAAqBK,oBAArB,CAA0CH,GAA1C,CACL,CAACI,aAAD,EAAgBF,KAAhB,KAA0B;AACxB,UAAIG,cAAJ;AACA,UAAIC,QAAJ;AACA,UAAIC,SAAS,GAAGH,aAAa,EAAEN,aAAf,EAA8BU,WAA9B,EAA2CR,GAA3C,CACbS,KAAD,IAAW;AACT,eAAO,CACLA,KAAK,CAACC,EADD,EAELD,KAAK,CAACE,QAFD,EAGLF,KAAK,CAACG,SAAN,EAAiBC,eAAjB,EAAkCC,eAH7B,CAAP;AAKD,OAPa,CAAhB,CAHwB,CAaxB;;AACA,cAAQV,aAAa,EAAEW,QAAf,EAAyBC,IAAjC;AACE,aAAK,qBAAL;AACE;AACA,cAAIC,OAAO,GAAGhC,QAAQ,CACpBmB,aAAa,EAAEc,iBAAf,EAAkCC,mBAAlC,EAAuDF,OADnC,CAAtB;AAGAZ,UAAAA,cAAc,GAAGnB,yBAAyB,CAAC+B,OAAD,EAAUV,SAAV,CAA1C;AACA;;AAEF,aAAK,6BAAL;AACE;AACAD,UAAAA,QAAQ,GAAGF,aAAa,EAAEgB,cAA1B;AACAf,UAAAA,cAAc,GAAGlB,2BAA2B,CAC1CoB,SAAS,CAAC,CAAD,CAAT,CAAa,CAAb,CAD0C,EAE1CD,QAF0C,CAA5C;AAIA;;AAEF,aAAK,gBAAL;AACEA,UAAAA,QAAQ,GAAGF,aAAa,EAAEiB,cAAf,EAA+BC,WAA1C;AACA,cAAIC,SAAS,GACXnB,aAAa,EAAEN,aAAf,EAA8BuB,cAA9B,EAA8CT,SAA9C,EACIW,SAFN;AAGAlB,UAAAA,cAAc,GAAGjB,SAAS,CAACmC,SAAD,EAAYjB,QAAZ,CAA1B;AACA;;AAEF,aAAK,kBAAL;AACE;AACA;;AAEF,aAAK,eAAL;AACE;AACA;;AAEF,aAAK,gBAAL;AACE;AACA;AApCJ;;AAuCA,0BACE,oBAAC,YAAD;AACE,QAAA,GAAG,EAAEJ,KADP;AAEE,QAAA,GAAG,EAAEE,aAAa,CAACoB,gBAFrB;AAGE,QAAA,UAAU,EAAEpB,aAAa,CAACqB;AAH5B,SAKGpB,cALH,CADF;AASD,KA/DI,CAAP;AAiED,GAnEM,CAAP;AAoED,CAtED;;AAwEA,SAAST,YAAT","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\nimport { sanitize } from \"hast-util-sanitize\";\nimport {\n  MarkdownInjectGatsbyImage,\n  InjectGatsbyBackgroundImage,\n  InjectSvg,\n} from \"./helpers\";\n\nconst StyledWrapper = styled.div`\n  ${(props) => props.css};\n`;\nconst StyleWrapper = ({ children, css, parent_css }) => {\n  return (\n    <StyledWrapper css={parent_css}>\n      <div className=\"panefragment\">\n        <StyledWrapper css={css}>{children}</StyledWrapper>\n      </div>\n    </StyledWrapper>\n  );\n};\n\nconst ComposePanes = (data) => {\n  // loop through the panes and render from markdown > htmlAst + css using styled-components\n  return data?.data?.relationships?.field_panes.map((pane, index) => {\n    // each pane needs its field_css_styles_parent\n    return pane?.relationships?.field_pane_fragments.map(\n      (pane_fragment, index) => {\n        let react_fragment;\n        let alt_text;\n        let imageData = pane_fragment?.relationships?.field_image?.map(\n          (image) => {\n            return [\n              image.id,\n              image.filename,\n              image.localFile?.childImageSharp?.gatsbyImageData,\n            ];\n          }\n        );\n\n        // switch on internal.type\n        switch (pane_fragment?.internal?.type) {\n          case \"paragraph__markdown\":\n            // replace images with Gatsby Images and prepare html\n            let htmlAst = sanitize(\n              pane_fragment?.childPaneFragment?.childMarkdownRemark?.htmlAst\n            );\n            react_fragment = MarkdownInjectGatsbyImage(htmlAst, imageData);\n            break;\n\n          case \"paragraph__background_image\":\n            // create Gatsby Background Image ... imageData[2] has the image\n            alt_text = pane_fragment?.field_alt_text;\n            react_fragment = InjectGatsbyBackgroundImage(\n              imageData[0][2],\n              alt_text\n            );\n            break;\n\n          case \"paragraph__svg\":\n            alt_text = pane_fragment?.field_svg_file?.description;\n            let publicURL =\n              pane_fragment?.relationships?.field_svg_file?.localFile\n                ?.publicURL;\n            react_fragment = InjectSvg(publicURL, alt_text);\n            break;\n\n          case \"paragraph__video\":\n            //\n            break;\n\n          case \"paragraph__d3\":\n            //\n            break;\n\n          case \"paragraph__h5p\":\n            //\n            break;\n        }\n\n        return (\n          <StyleWrapper\n            key={index}\n            css={pane_fragment.field_css_styles}\n            parent_css={pane_fragment.field_css_styles_parent}\n          >\n            {react_fragment}\n          </StyleWrapper>\n        );\n      }\n    );\n  });\n};\n\nexport { ComposePanes };\n"],"file":"compose-panes.js"}
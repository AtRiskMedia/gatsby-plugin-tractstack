{"version":3,"sources":["src/compose-panes.js"],"names":["React","useEffect","useRef","sanitize","MarkdownParagraph","InjectGatsbyBackgroundImage","InjectGatsbyBackgroundVideo","InjectSvg","StyledWrapper","ComposePanes","data","viewport","key","composedPanes","relationships","field_panes","map","pane","composedPane","field_pane_fragments","pane_fragment","index","field_hidden_viewports","replace","split","indexOf","react_fragment","alt_text","imageData","css_styles","css_styles_parent","includes","internal","type","field_css_styles_mobile","field_css_styles_parent_mobile","field_css_styles_tablet","field_css_styles_parent_tablet","field_css_styles_desktop","field_css_styles_parent_desktop","field_image","image","id","filename","localFile","childImageSharp","gatsbyImageData","htmlAst","childPaneFragment","childMarkdownRemark","field_zindex","field_cdn_url","field_alt_text","this_image_data","field_svg_file","description","publicURL","field_css_styles_parent","pane_height","field_height_ratio_mobile","field_height_ratio_tablet","field_height_ratio_desktop","parseInt"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport { sanitize } from \"hast-util-sanitize\";\nimport {\n  MarkdownParagraph,\n  InjectGatsbyBackgroundImage,\n  InjectGatsbyBackgroundVideo,\n  InjectSvg,\n  StyledWrapper,\n} from \"./helpers\";\n\nfunction ComposePanes(data) {\n  // if viewport is not yet defined, return empty fragment\n  if (typeof data?.viewport?.key === \"undefined\") return <></>;\n  // loop through the panes in view and render each pane fragment\n  const composedPanes = data?.data?.relationships?.field_panes.map((pane) => {\n    const composedPane = pane?.relationships?.field_pane_fragments.map(\n      (pane_fragment, index) => {\n        // skip if current viewport is listed in field_hidden_viewports\n        if (\n          pane_fragment?.field_hidden_viewports\n            .replace(/\\s+/g, \"\")\n            .split(\",\")\n            .indexOf(data?.viewport?.key) > -1\n        ) {\n          return;\n        }\n        let react_fragment,\n          alt_text,\n          imageData,\n          css_styles = \"\",\n          css_styles_parent = \"\";\n        // pre-pass to get viewport styles for markdown, background video and image\n        if (\n          [\n            \"paragraph__markdown\",\n            \"paragraph__background_video\",\n            \"paragraph__background_image\",\n          ].includes(pane_fragment?.internal?.type)\n        ) {\n          switch (data?.viewport?.key) {\n            case \"mobile\":\n              css_styles = pane_fragment?.field_css_styles_mobile;\n              css_styles_parent = pane_fragment?.field_css_styles_parent_mobile;\n              break;\n            case \"tablet\":\n              css_styles = pane_fragment?.field_css_styles_tablet;\n              css_styles_parent = pane_fragment?.field_css_styles_parent_tablet;\n              break;\n            case \"desktop\":\n              css_styles = pane_fragment?.field_css_styles_desktop;\n              css_styles_parent =\n                pane_fragment?.field_css_styles_parent_desktop;\n              break;\n          }\n        }\n        switch (pane_fragment?.internal?.type) {\n          case \"paragraph__markdown\":\n            // get image data (if available)\n            imageData = pane_fragment?.relationships?.field_image?.map(\n              (image) => {\n                return [\n                  image.id,\n                  image.filename,\n                  image.localFile?.childImageSharp?.gatsbyImageData,\n                ];\n              }\n            );\n            // replaces images with Gatsby Images and prepares html\n            let htmlAst = sanitize(\n              pane_fragment?.childPaneFragment?.childMarkdownRemark?.htmlAst\n            );\n            react_fragment = MarkdownParagraph(\n              htmlAst,\n              imageData,\n              index,\n              css_styles_parent,\n              css_styles,\n              pane_fragment?.field_zindex\n            );\n            break;\n\n          case \"paragraph__background_video\":\n            react_fragment = InjectGatsbyBackgroundVideo(\n              pane_fragment?.id,\n              pane_fragment?.field_cdn_url,\n              pane_fragment?.field_alt_text,\n              index,\n              css_styles_parent,\n              pane_fragment?.field_zindex\n            );\n            break;\n\n          case \"paragraph__background_image\":\n            imageData = pane_fragment?.relationships?.field_image?.map(\n              (image) => {\n                let key = data?.viewport?.key;\n                let this_image_data = image[key];\n                if (typeof this_image_data !== \"undefined\") {\n                  return this_image_data.childImageSharp?.gatsbyImageData;\n                }\n              }\n            );\n            react_fragment = InjectGatsbyBackgroundImage(\n              imageData[0],\n              pane_fragment?.field_alt_text,\n              index,\n              css_styles_parent,\n              pane_fragment?.field_zindex\n            );\n            break;\n\n          case \"paragraph__svg\":\n            alt_text = pane_fragment?.field_svg_file?.description;\n            let publicURL =\n              pane_fragment?.relationships?.field_svg_file?.localFile\n                ?.publicURL;\n            react_fragment = InjectSvg(\n              publicURL,\n              alt_text,\n              index,\n              pane_fragment?.field_css_styles_parent,\n              pane_fragment?.field_zindex\n            );\n            break;\n\n          case \"paragraph__d3\":\n            //\n            break;\n\n          case \"paragraph__h5p\":\n            //\n            break;\n        }\n        return react_fragment;\n      }\n    );\n    let pane_height;\n    switch (data?.viewport?.key) {\n      case \"mobile\":\n        pane_height = pane?.field_height_ratio_mobile;\n        break;\n      case \"tablet\":\n        pane_height = pane?.field_height_ratio_tablet;\n        break;\n      case \"desktop\":\n        pane_height = pane?.field_height_ratio_desktop;\n        break;\n    }\n    return (\n      <StyledWrapper\n        key={pane?.id}\n        className={\"pane pane__view--\" + data?.viewport?.key}\n        css={\"height:\" + parseInt(pane_height) + \"vw;\"}\n      >\n        {composedPane}\n      </StyledWrapper>\n    );\n\n    return (\n      <div key={pane?.id} className={\"pane pane__view--\" + data?.viewport?.key}>\n        {composedPane}\n      </div>\n    );\n  });\n  return composedPanes;\n}\n\nexport { ComposePanes };\n"],"file":"compose-panes.js"}
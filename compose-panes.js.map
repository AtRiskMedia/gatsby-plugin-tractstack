{"version":3,"sources":["src/compose-panes.js"],"names":["React","styled","sanitize","MarkdownInjectGatsbyImage","InjectGatsbyBackgroundImage","InjectGatsbyBackgroundVideo","InjectSvg","StyledWrapper","div","props","css","StyledInner","children","parent_css","viewport","StyledOuter","ComposePanes","data","key","recall","lookahead","relationships","field_panes","field_lookahead","composedPanes","slice","map","pane","field_pane_fragments","pane_fragment","index","react_fragment","alt_text","imageData","internal","type","field_image","image","id","filename","localFile","childImageSharp","gatsbyImageData","htmlAst","childPaneFragment","childMarkdownRemark","field_cdn_url","field_alt_text","this_image_data","field_svg_file","description","publicURL","field_css_styles","field_css_styles_parent"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\nimport { sanitize } from \"hast-util-sanitize\";\nimport {\n  MarkdownInjectGatsbyImage,\n  InjectGatsbyBackgroundImage,\n  InjectGatsbyBackgroundVideo,\n  InjectSvg,\n} from \"./helpers\";\n\nconst StyledWrapper = styled.div`\n  ${(props) => props.css};\n`;\nconst StyledInner = ({ children, css, parent_css, viewport }) => {\n  return (\n    <StyledWrapper css={parent_css}>\n      <div className={\"paneFragment paneFragment__view--\" + viewport}>\n        <StyledWrapper css={css}>{children}</StyledWrapper>\n      </div>\n    </StyledWrapper>\n  );\n};\nconst StyledOuter = ({ children, css, viewport }) => {\n  return (\n    <StyledWrapper css={css}>\n      <div className={\"storyFragment storyFragment__view--\" + viewport}>\n        {children}\n      </div>\n    </StyledWrapper>\n  );\n};\n\nconst ComposePanes = (data) => {\n  // if viewport is not yet defined, return empty fragment\n  if (typeof data?.viewport?.key === \"undefined\") return <></>;\n  let recall = data?.recall;\n  let lookahead =\n    data?.data?.relationships?.field_panes[recall - 1].field_lookahead;\n  // loop through the panes in view and render each pane fragment\n  const composedPanes = data?.data?.relationships?.field_panes\n    // compose current pane plus lookahead\n    .slice(recall - 1, recall + lookahead)\n    .map((pane) => {\n      return pane?.relationships?.field_pane_fragments.map(\n        (pane_fragment, index) => {\n          let react_fragment, alt_text, imageData;\n\n          // switch on internal.type\n          switch (pane_fragment?.internal?.type) {\n            case \"paragraph__markdown\":\n              // get image data (if available)\n              imageData = pane_fragment?.relationships?.field_image?.map(\n                (image) => {\n                  return [\n                    image.id,\n                    image.filename,\n                    image.localFile?.childImageSharp?.gatsbyImageData,\n                  ];\n                },\n                recall\n              );\n\n              // replaces images with Gatsby Images and prepares html\n              let htmlAst = sanitize(\n                pane_fragment?.childPaneFragment?.childMarkdownRemark?.htmlAst\n              );\n              react_fragment = MarkdownInjectGatsbyImage(htmlAst, imageData);\n              break;\n\n            case \"paragraph__background_video\":\n              react_fragment = InjectGatsbyBackgroundVideo(\n                pane_fragment?.id,\n                pane_fragment?.field_cdn_url,\n                pane_fragment?.field_alt_text\n              );\n              break;\n\n            case \"paragraph__background_image\":\n              imageData = pane_fragment?.relationships?.field_image?.map(\n                (image) => {\n                  let key = data?.viewport?.key;\n                  let this_image_data = image[key];\n                  if (typeof this_image_data !== \"undefined\") {\n                    return this_image_data.childImageSharp?.gatsbyImageData;\n                  }\n                }\n              );\n              react_fragment = InjectGatsbyBackgroundImage(\n                imageData[0],\n                pane_fragment?.field_alt_text\n              );\n              break;\n\n            case \"paragraph__svg\":\n              alt_text = pane_fragment?.field_svg_file?.description;\n              let publicURL =\n                pane_fragment?.relationships?.field_svg_file?.localFile\n                  ?.publicURL;\n              react_fragment = InjectSvg(publicURL, alt_text);\n              break;\n\n            case \"paragraph__d3\":\n              //\n              break;\n\n            case \"paragraph__h5p\":\n              //\n              break;\n          }\n\n          return (\n            <StyledInner\n              key={index}\n              css={pane_fragment?.field_css_styles}\n              parent_css={pane_fragment?.field_css_styles_parent}\n              viewport={data?.viewport?.key}\n            >\n              {react_fragment}\n            </StyledInner>\n          );\n        }\n      );\n    });\n  return (\n    <StyledOuter css={data?.parent_css} viewport={data?.viewport?.key}>\n      {composedPanes}\n    </StyledOuter>\n  );\n};\n\nexport { ComposePanes };\n"],"file":"compose-panes.js"}
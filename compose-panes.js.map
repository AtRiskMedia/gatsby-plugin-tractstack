{"version":3,"sources":["src/compose-panes.js"],"names":["React","useEffect","useRef","sanitize","MarkdownParagraph","InjectGatsbyBackgroundImage","InjectGatsbyBackgroundVideo","InjectSvg","gsap","ComposePanes","data","viewport","key","composedPanes","relationships","field_panes","map","pane","composedPane","field_pane_fragments","pane_fragment","index","react_fragment","alt_text","imageData","internal","type","field_image","image","id","filename","localFile","childImageSharp","gatsbyImageData","htmlAst","childPaneFragment","childMarkdownRemark","field_css_styles_parent","field_css_styles","field_zindex","field_cdn_url","field_alt_text","this_image_data","field_svg_file","description","publicURL","paneRef","from","current","opacity","delay"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport { sanitize } from \"hast-util-sanitize\";\nimport {\n  MarkdownParagraph,\n  InjectGatsbyBackgroundImage,\n  InjectGatsbyBackgroundVideo,\n  InjectSvg,\n} from \"./helpers\";\nimport { gsap } from \"gsap\";\n\nfunction ComposePanes(data) {\n  // if viewport is not yet defined, return empty fragment\n  if (typeof data?.viewport?.key === \"undefined\") return <></>;\n  // loop through the panes in view and render each pane fragment\n  const composedPanes = data?.data?.relationships?.field_panes\n    // compose current pane plus lookahead\n    .map((pane) => {\n      const composedPane = pane?.relationships?.field_pane_fragments.map(\n        (pane_fragment, index) => {\n          let react_fragment, alt_text, imageData;\n          // switch on internal.type\n          switch (pane_fragment?.internal?.type) {\n            case \"paragraph__markdown\":\n              // get image data (if available)\n              imageData = pane_fragment?.relationships?.field_image?.map(\n                (image) => {\n                  return [\n                    image.id,\n                    image.filename,\n                    image.localFile?.childImageSharp?.gatsbyImageData,\n                  ];\n                }\n              );\n\n              // replaces images with Gatsby Images and prepares html\n              let htmlAst = sanitize(\n                pane_fragment?.childPaneFragment?.childMarkdownRemark?.htmlAst\n              );\n              react_fragment = MarkdownParagraph(\n                htmlAst,\n                imageData,\n                index,\n                pane_fragment?.field_css_styles_parent,\n                pane_fragment?.field_css_styles,\n                pane_fragment?.field_zindex\n              );\n              break;\n\n            case \"paragraph__background_video\":\n              react_fragment = InjectGatsbyBackgroundVideo(\n                pane_fragment?.id,\n                pane_fragment?.field_cdn_url,\n                pane_fragment?.field_alt_text,\n                index\n              );\n              break;\n\n            case \"paragraph__background_image\":\n              imageData = pane_fragment?.relationships?.field_image?.map(\n                (image) => {\n                  let key = data?.viewport?.key;\n                  let this_image_data = image[key];\n                  if (typeof this_image_data !== \"undefined\") {\n                    return this_image_data.childImageSharp?.gatsbyImageData;\n                  }\n                }\n              );\n              react_fragment = InjectGatsbyBackgroundImage(\n                imageData[0],\n                pane_fragment?.field_alt_text,\n                index\n              );\n              break;\n\n            case \"paragraph__svg\":\n              alt_text = pane_fragment?.field_svg_file?.description;\n              let publicURL =\n                pane_fragment?.relationships?.field_svg_file?.localFile\n                  ?.publicURL;\n              react_fragment = InjectSvg(publicURL, alt_text, index);\n              break;\n\n            case \"paragraph__d3\":\n              //\n              break;\n\n            case \"paragraph__h5p\":\n              //\n              break;\n          }\n          return react_fragment;\n        }\n      );\n      let paneRef = useRef();\n      useEffect(() => {\n        gsap.from(paneRef.current, 1, { opacity: 0, delay: 0 });\n      });\n      return (\n        <div\n          key={pane?.id}\n          className={\"pane pane__view--\" + data?.viewport?.key}\n          ref={paneRef}\n        >\n          {composedPane}\n        </div>\n      );\n    });\n  return composedPanes;\n}\n\nexport { ComposePanes };\n"],"file":"compose-panes.js"}
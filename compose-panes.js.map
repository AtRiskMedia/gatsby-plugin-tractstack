{"version":3,"sources":["src/compose-panes.js"],"names":["React","useRef","MarkdownParagraph","InjectGatsbyBackgroundImage","InjectGatsbyBackgroundVideo","InjectSvg","StyledWrapperSection","IsVisible","ComposePanes","data","viewport","key","composedPanes","relationships","field_panes","map","pane","i","background_colour","field_pane_fragments","filter","e","field_hidden_viewports","replace","split","indexOf","internal","type","composedPane","pane_fragment","index","react_fragment","alt_text","imageData","css_styles","css_styles_parent","field_css_styles_mobile","field_css_styles_parent_mobile","field_css_styles_tablet","field_css_styles_parent_tablet","field_css_styles_desktop","field_css_styles_parent_desktop","field_image","image","id","filename","localFile","childImageSharp","gatsbyImageData","child","childPaneFragment","childMarkdownRemark","htmlAst","children","value","field_zindex","field_cdn_url","field_alt_text","this_image_data","field_svg_file","publicURL","description","prefersReducedMotion","actions","JSON","parse","field_options","payload","in","onscreen","function","speed","delay","out","offscreen","pane_height","field_height_ratio_mobile","field_height_ratio_tablet","field_height_ratio_desktop","Object","keys","length","this_css","parseInt","field_background_colour"],"mappings":"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","sourcesContent":["import React, { useRef } from \"react\";\nimport {\n  MarkdownParagraph,\n  InjectGatsbyBackgroundImage,\n  InjectGatsbyBackgroundVideo,\n  InjectSvg,\n  StyledWrapperSection,\n} from \"./helpers\";\nimport { IsVisible } from \"./is-visible.js\";\n\nfunction ComposePanes(data) {\n  // if viewport is not yet defined, return empty fragment\n  if (typeof data?.viewport?.key === \"undefined\") return <></>;\n  // loop through the panes in view and render each pane fragment\n  const composedPanes = data?.data?.relationships?.field_panes.map(\n    (pane, i) => {\n      // check for background colour\n      const background_colour = pane?.relationships?.field_pane_fragments\n        // skip if current viewport is listed in field_hidden_viewports\n        .filter(\n          (e) =>\n            e.field_hidden_viewports\n              .replace(/\\s+/g, \"\")\n              .split(\",\")\n              .indexOf(data?.viewport?.key) == -1\n        )\n        .filter((e) => e?.internal?.type === \"paragraph__background_colour\");\n      let composedPane = pane?.relationships?.field_pane_fragments\n        // skip if current viewport is listed in field_hidden_viewports\n        .filter(\n          (e) =>\n            e.field_hidden_viewports\n              .replace(/\\s+/g, \"\")\n              .split(\",\")\n              .indexOf(data?.viewport?.key) == -1\n        )\n        // and filter out paneFragment if background_colour\n        .filter((e) => e?.internal?.type !== \"paragraph__background_colour\")\n        .map((pane_fragment, index) => {\n          let react_fragment,\n            alt_text,\n            imageData,\n            css_styles = \"\",\n            css_styles_parent = \"\";\n          switch (data?.viewport?.key) {\n            case \"mobile\":\n              css_styles = pane_fragment?.field_css_styles_mobile;\n              css_styles_parent = pane_fragment?.field_css_styles_parent_mobile;\n              break;\n            case \"tablet\":\n              css_styles = pane_fragment?.field_css_styles_tablet;\n              css_styles_parent = pane_fragment?.field_css_styles_parent_tablet;\n              break;\n            case \"desktop\":\n              css_styles = pane_fragment?.field_css_styles_desktop;\n              css_styles_parent =\n                pane_fragment?.field_css_styles_parent_desktop;\n              break;\n          }\n          // render this paneFragment\n          switch (pane_fragment?.internal?.type) {\n            case \"paragraph__markdown\":\n              // get image data (if available)\n              imageData = pane_fragment?.relationships?.field_image?.map(\n                (image) => {\n                  return [\n                    image?.id,\n                    image?.filename,\n                    image?.localFile?.childImageSharp?.gatsbyImageData,\n                  ];\n                }\n              );\n              // now pre-render MarkdownParagraph elements and inject images\n              let child =\n                pane_fragment?.childPaneFragment?.childMarkdownRemark?.htmlAst;\n              child.children =\n                pane_fragment?.childPaneFragment?.childMarkdownRemark?.htmlAst?.children?.filter(\n                  (e) => !(e.type === \"text\" && e.value === \"\\n\")\n                );\n              react_fragment = MarkdownParagraph(\n                pane_fragment?.id,\n                child,\n                imageData,\n                css_styles_parent,\n                css_styles,\n                pane_fragment?.field_zindex\n              );\n              break;\n\n            case \"paragraph__background_video\":\n              react_fragment = InjectGatsbyBackgroundVideo(\n                pane_fragment?.id,\n                pane_fragment?.field_cdn_url,\n                pane_fragment?.field_alt_text,\n                css_styles_parent,\n                css_styles,\n                pane_fragment?.field_zindex\n              );\n              break;\n\n            case \"paragraph__background_image\":\n              imageData = pane_fragment?.relationships?.field_image?.map(\n                (image) => {\n                  let key = data?.viewport?.key;\n                  let this_image_data = image[key];\n                  if (typeof this_image_data !== \"undefined\") {\n                    return this_image_data.childImageSharp?.gatsbyImageData;\n                  }\n                }\n              );\n              react_fragment = InjectGatsbyBackgroundImage(\n                pane_fragment?.id,\n                imageData[0],\n                pane_fragment?.field_alt_text,\n                css_styles_parent,\n                pane_fragment?.field_zindex\n              );\n              break;\n\n            case \"paragraph__svg\":\n              react_fragment = InjectSvg(\n                pane_fragment?.id,\n                pane_fragment?.relationships?.field_svg_file?.localFile\n                  ?.publicURL,\n                pane_fragment?.field_svg_file?.description,\n                css_styles_parent,\n                pane_fragment?.field_zindex\n              );\n              break;\n\n            case \"paragraph__d3\":\n              //\n              break;\n\n            case \"paragraph__h5p\":\n              //\n              break;\n          }\n          if (data?.prefersReducedMotion) {\n            return (\n              <div className=\"paneFragment\" key={pane_fragment?.id}>\n                {react_fragment}\n              </div>\n            );\n          }\n          // check for options payload\n          const actions = JSON.parse(pane_fragment?.field_options);\n          if (!\"onscreen\" in actions && !\"offscreen\" in actions) {\n            // if no options, do not animate\n            <div className=\"paneFragment\" key={pane_fragment?.id}>\n              {react_fragment}\n            </div>;\n          }\n          // else animate\n          let payload = {\n            in: [\n              actions?.onscreen?.function,\n              actions?.onscreen?.speed,\n              actions?.onscreen?.delay,\n            ],\n            out: [\n              actions?.offscreen?.function,\n              actions?.offscreen?.speed,\n              actions?.offscreen?.delay,\n            ],\n          };\n          return (\n            <div className=\"paneFragment\" key={pane_fragment?.id}>\n              <IsVisible payload={payload}>{react_fragment}</IsVisible>\n            </div>\n          );\n        });\n\n      // compose this pane\n      let pane_height;\n      switch (data?.viewport?.key) {\n        case \"mobile\":\n          pane_height = pane?.field_height_ratio_mobile;\n          break;\n        case \"tablet\":\n          pane_height = pane?.field_height_ratio_tablet;\n          break;\n        case \"desktop\":\n          pane_height = pane?.field_height_ratio_desktop;\n          break;\n      }\n      // skip if empty pane\n      if (Object.keys(composedPane).length === 0) return;\n      let this_css = \"height:\" + parseInt(pane_height) + \"vw;\";\n      if (background_colour.length)\n        this_css =\n          this_css +\n          \" background-color:\" +\n          background_colour[0].field_background_colour +\n          \";\";\n      return (\n        <StyledWrapperSection\n          key={pane?.id}\n          className={\"pane pane__view--\" + data?.viewport?.key}\n          css={this_css}\n        >\n          {composedPane}\n        </StyledWrapperSection>\n      );\n    }\n  );\n  // this is the storyFragment\n  return composedPanes;\n}\n\nexport { ComposePanes };\n"],"file":"compose-panes.js"}
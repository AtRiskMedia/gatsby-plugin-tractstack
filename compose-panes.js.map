{"version":3,"sources":["src/compose-panes.js"],"names":["React","styled","sanitize","MarkdownInjectGatsbyImage","InjectGatsbyBackgroundImage","StyledWrapper","div","props","css","StyleWrapper","children","parent_css","ComposePanes","data","relationships","field_panes","map","pane","index","field_pane_fragments","pane_fragment","react_fragment","imageData","field_image","image","id","filename","localFile","childImageSharp","gatsbyImageData","internal","type","htmlAst","childPaneFragment","childMarkdownRemark","alt_text","field_alt_text","field_css_styles","field_css_styles_parent"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,QAAT,QAAyB,oBAAzB;AACA,SACEC,yBADF,EAEEC,2BAFF,QAGO,WAHP;AAKA,MAAMC,aAAa,GAAGJ,MAAM,CAACK,GAAI;AACjC,IAAKC,KAAD,IAAWA,KAAK,CAACC,GAAI;AACzB,CAFA;;AAGA,MAAMC,YAAY,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYF,EAAAA,GAAZ;AAAiBG,EAAAA;AAAjB,CAAD,KAAmC;AACtD,sBACE,oBAAC,aAAD;AAAe,IAAA,GAAG,EAAEA;AAApB,kBACE,oBAAC,aAAD;AAAe,IAAA,GAAG,EAAEH;AAApB,KAA0BE,QAA1B,CADF,CADF;AAKD,CAND;;AAQA,MAAME,YAAY,GAAIC,IAAD,IAAU;AAC7B;AACA,SAAOA,IAAI,CAACA,IAAL,CAAUC,aAAV,CAAwBC,WAAxB,CAAoCC,GAApC,CAAwC,CAACC,IAAD,EAAOC,KAAP,KAAiB;AAC9D;AACA,WAAOD,IAAI,CAACH,aAAL,CAAmBK,oBAAnB,CAAwCH,GAAxC,CACL,CAACI,aAAD,EAAgBF,KAAhB,KAA0B;AACxB,UAAIG,cAAJ;AACA,UAAIC,SAAS,GAAGF,aAAa,CAACN,aAAd,CAA4BS,WAA5B,CAAwCP,GAAxC,CAA6CQ,KAAD,IAAW;AACrE,eAAO,CACLA,KAAK,CAACC,EADD,EAELD,KAAK,CAACE,QAFD,EAGLF,KAAK,CAACG,SAAN,CAAgBC,eAAhB,CAAgCC,eAH3B,CAAP;AAKD,OANe,CAAhB,CAFwB,CAUxB;;AACA,cAAQT,aAAa,CAACU,QAAd,CAAuBC,IAA/B;AACE,aAAK,qBAAL;AACE;AACA,cAAIC,OAAO,GAAG9B,QAAQ,CACpBkB,aAAa,CAACa,iBAAd,CAAgCC,mBAAhC,CAAoDF,OADhC,CAAtB;AAGAX,UAAAA,cAAc,GAAGlB,yBAAyB,CAAC6B,OAAD,EAAUV,SAAV,CAA1C;AACA;;AAEF,aAAK,6BAAL;AACE;AACA,cAAIa,QAAQ,GAAGf,aAAa,CAACgB,cAA7B;AACAf,UAAAA,cAAc,GAAGjB,2BAA2B,CAC1CkB,SAAS,CAAC,CAAD,CAAT,CAAa,CAAb,CAD0C,EAE1Ca,QAF0C,CAA5C;AAIA;;AAEF,aAAK,gBAAL;AACE;AACA;;AAEF,aAAK,kBAAL;AACE;AACA;;AAEF,aAAK,eAAL;AACE;AACA;;AAEF,aAAK,gBAAL;AACE;AACA;AAhCJ;;AAmCA,0BACE,oBAAC,YAAD;AACE,QAAA,GAAG,EAAEjB,KADP;AAEE,QAAA,GAAG,EAAEE,aAAa,CAACiB,gBAFrB;AAGE,QAAA,UAAU,EAAEjB,aAAa,CAACkB;AAH5B,SAKGjB,cALH,CADF;AASD,KAxDI,CAAP;AA0DD,GA5DM,CAAP;AA6DD,CA/DD;;AAiEA,SAAST,YAAT","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\nimport { sanitize } from \"hast-util-sanitize\";\nimport {\n  MarkdownInjectGatsbyImage,\n  InjectGatsbyBackgroundImage,\n} from \"./helpers\";\n\nconst StyledWrapper = styled.div`\n  ${(props) => props.css};\n`;\nconst StyleWrapper = ({ children, css, parent_css }) => {\n  return (\n    <StyledWrapper css={parent_css}>\n      <StyledWrapper css={css}>{children}</StyledWrapper>\n    </StyledWrapper>\n  );\n};\n\nconst ComposePanes = (data) => {\n  // loop through the panes and render from markdown > htmlAst + css using styled-components\n  return data.data.relationships.field_panes.map((pane, index) => {\n    // each pane needs its field_css_styles_parent\n    return pane.relationships.field_pane_fragments.map(\n      (pane_fragment, index) => {\n        let react_fragment;\n        let imageData = pane_fragment.relationships.field_image.map((image) => {\n          return [\n            image.id,\n            image.filename,\n            image.localFile.childImageSharp.gatsbyImageData,\n          ];\n        });\n\n        // switch on internal.type\n        switch (pane_fragment.internal.type) {\n          case \"paragraph__markdown\":\n            // replace images with Gatsby Images and prepare html\n            let htmlAst = sanitize(\n              pane_fragment.childPaneFragment.childMarkdownRemark.htmlAst\n            );\n            react_fragment = MarkdownInjectGatsbyImage(htmlAst, imageData);\n            break;\n\n          case \"paragraph__background_image\":\n            // create Gatsby Background Image ... imageData[2] has the image\n            let alt_text = pane_fragment.field_alt_text;\n            react_fragment = InjectGatsbyBackgroundImage(\n              imageData[0][2],\n              alt_text\n            );\n            break;\n\n          case \"paragraph__svg\":\n            //\n            break;\n\n          case \"paragraph__video\":\n            //\n            break;\n\n          case \"paragraph__d3\":\n            //\n            break;\n\n          case \"paragraph__h5p\":\n            //\n            break;\n        }\n\n        return (\n          <StyleWrapper\n            key={index}\n            css={pane_fragment.field_css_styles}\n            parent_css={pane_fragment.field_css_styles_parent}\n          >\n            {react_fragment}\n          </StyleWrapper>\n        );\n      }\n    );\n  });\n};\n\nexport { ComposePanes };\n"],"file":"compose-panes.js"}
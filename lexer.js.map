{"version":3,"file":"lexer.js","names":["DOUBLEQUOTE","BRACKETLEFT","BRACKETRIGHT","SEMICOLON","NEWLINE","WHITESPACE","lispLexer","payload","inString","tokens","curToken","i","length","char","charAt","tokenized","remaining","substring","push","ESCAPED","includes"],"sources":["src/lexer.js"],"sourcesContent":["const DOUBLEQUOTE = `\"`;\nconst BRACKETLEFT = `(`;\nconst BRACKETRIGHT = `)`;\nconst SEMICOLON = `;`;\nconst NEWLINE = `\\n`;\nconst WHITESPACE = [\" \", \"\\n\", \"\\t\"];\n\nfunction lispLexer(payload = \"\", inString = false) {\n  const tokens = [];\n  let curToken = \"\";\n\n  for (let i = 0; i < payload.length; i++) {\n    const char = payload.charAt(i);\n    if (char === DOUBLEQUOTE && inString === false) {\n      const [tokenized, remaining] = lispLexer(payload.substring(i + 1), true);\n      tokens.push(tokenized);\n      payload = remaining;\n      i = -1;\n    } else if (char === DOUBLEQUOTE) {\n      if (curToken.length) {\n        tokens.push(+curToken || curToken);\n      }\n      return [tokens, payload.substring(i + 1)];\n    } else if (char === BRACKETLEFT) {\n      if (inString && payload?.charAt(i - 1) === ESCAPED) throw \"PARSING ERROR\";\n      const [tokenized, remaining] = lispLexer(payload.substring(i + 1));\n      tokens.push(tokenized);\n      payload = remaining;\n      i = -1;\n    } else if (char === BRACKETRIGHT) {\n      if (inString && payload?.charAt(i - 1) === ESCAPED) throw \"PARSING ERROR\";\n      if (curToken.length) {\n        tokens.push(+curToken || curToken);\n      }\n      return [tokens, payload.substring(i + 1)];\n    } else if (char === SEMICOLON) {\n      // skip comments\n      while (payload.charAt(i) !== NEWLINE) {\n        i++;\n      }\n    } else if (WHITESPACE.includes(char) && inString !== true) {\n      if (curToken.length) {\n        tokens.push(+curToken || curToken);\n      }\n      curToken = \"\";\n    } else {\n      curToken += char;\n    }\n  }\n  return [tokens, \"\"];\n}\n\nexport { lispLexer };\n"],"mappings":"AAAA,MAAMA,WAAW,GAAI,GAArB;AACA,MAAMC,WAAW,GAAI,GAArB;AACA,MAAMC,YAAY,GAAI,GAAtB;AACA,MAAMC,SAAS,GAAI,GAAnB;AACA,MAAMC,OAAO,GAAI,IAAjB;AACA,MAAMC,UAAU,GAAG,CAAC,GAAD,EAAM,IAAN,EAAY,IAAZ,CAAnB;;AAEA,SAASC,SAAT,CAAmBC,OAAO,GAAG,EAA7B,EAAiCC,QAAQ,GAAG,KAA5C,EAAmD;EACjD,MAAMC,MAAM,GAAG,EAAf;EACA,IAAIC,QAAQ,GAAG,EAAf;;EAEA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,OAAO,CAACK,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;IACvC,MAAME,IAAI,GAAGN,OAAO,CAACO,MAAR,CAAeH,CAAf,CAAb;;IACA,IAAIE,IAAI,KAAKb,WAAT,IAAwBQ,QAAQ,KAAK,KAAzC,EAAgD;MAC9C,MAAM,CAACO,SAAD,EAAYC,SAAZ,IAAyBV,SAAS,CAACC,OAAO,CAACU,SAAR,CAAkBN,CAAC,GAAG,CAAtB,CAAD,EAA2B,IAA3B,CAAxC;MACAF,MAAM,CAACS,IAAP,CAAYH,SAAZ;MACAR,OAAO,GAAGS,SAAV;MACAL,CAAC,GAAG,CAAC,CAAL;IACD,CALD,MAKO,IAAIE,IAAI,KAAKb,WAAb,EAA0B;MAC/B,IAAIU,QAAQ,CAACE,MAAb,EAAqB;QACnBH,MAAM,CAACS,IAAP,CAAY,CAACR,QAAD,IAAaA,QAAzB;MACD;;MACD,OAAO,CAACD,MAAD,EAASF,OAAO,CAACU,SAAR,CAAkBN,CAAC,GAAG,CAAtB,CAAT,CAAP;IACD,CALM,MAKA,IAAIE,IAAI,KAAKZ,WAAb,EAA0B;MAC/B,IAAIO,QAAQ,IAAID,OAAO,EAAEO,MAAT,CAAgBH,CAAC,GAAG,CAApB,MAA2BQ,OAA3C,EAAoD,MAAM,eAAN;MACpD,MAAM,CAACJ,SAAD,EAAYC,SAAZ,IAAyBV,SAAS,CAACC,OAAO,CAACU,SAAR,CAAkBN,CAAC,GAAG,CAAtB,CAAD,CAAxC;MACAF,MAAM,CAACS,IAAP,CAAYH,SAAZ;MACAR,OAAO,GAAGS,SAAV;MACAL,CAAC,GAAG,CAAC,CAAL;IACD,CANM,MAMA,IAAIE,IAAI,KAAKX,YAAb,EAA2B;MAChC,IAAIM,QAAQ,IAAID,OAAO,EAAEO,MAAT,CAAgBH,CAAC,GAAG,CAApB,MAA2BQ,OAA3C,EAAoD,MAAM,eAAN;;MACpD,IAAIT,QAAQ,CAACE,MAAb,EAAqB;QACnBH,MAAM,CAACS,IAAP,CAAY,CAACR,QAAD,IAAaA,QAAzB;MACD;;MACD,OAAO,CAACD,MAAD,EAASF,OAAO,CAACU,SAAR,CAAkBN,CAAC,GAAG,CAAtB,CAAT,CAAP;IACD,CANM,MAMA,IAAIE,IAAI,KAAKV,SAAb,EAAwB;MAC7B;MACA,OAAOI,OAAO,CAACO,MAAR,CAAeH,CAAf,MAAsBP,OAA7B,EAAsC;QACpCO,CAAC;MACF;IACF,CALM,MAKA,IAAIN,UAAU,CAACe,QAAX,CAAoBP,IAApB,KAA6BL,QAAQ,KAAK,IAA9C,EAAoD;MACzD,IAAIE,QAAQ,CAACE,MAAb,EAAqB;QACnBH,MAAM,CAACS,IAAP,CAAY,CAACR,QAAD,IAAaA,QAAzB;MACD;;MACDA,QAAQ,GAAG,EAAX;IACD,CALM,MAKA;MACLA,QAAQ,IAAIG,IAAZ;IACD;EACF;;EACD,OAAO,CAACJ,MAAD,EAAS,EAAT,CAAP;AACD;;AAED,SAASH,SAAT"}